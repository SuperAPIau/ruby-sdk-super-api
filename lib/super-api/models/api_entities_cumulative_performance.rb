=begin
#Super API Documentation

#The Super API makes superannuation fund data easily accessible for developers.  Build the future.

The version of the OpenAPI document: 1.0.0
Contact: support@superapi.com.au
Generated by: https://openapi-generator.tech
OpenAPI Generator version: 5.1.0-SNAPSHOT

=end

require 'date'
require 'time'

module SuperAPI
  # The cumulative performance from the inception of the FundOption.  This represents the growth over time from the inception date of the FundOption to the requested date.
  class APIEntitiesCumulativePerformance
    # Type of performance report
    attr_accessor :report

    # Growth rate for the performance period
    attr_accessor :growth_rate

    # Identifies how the growth rate should be interpreted, ie: as a percentage.  Currently only percentage is used.  Other options may become available in the future.
    attr_accessor :growth_rate_type

    # Start date of the cumulative performance period.  This may differ from the requested start date if the requested period is longer than the period for which data exists.  The start_date reflects the requested date, or the earliest date for which data is available.
    attr_accessor :start_date

    # End date of the cumulative performance period.  This may differ from the requested end date if the requested period is longer than the period for which data exists.  The end_date reflects the requested date, or the most recent date for which data is available.
    attr_accessor :end_date

    # A count of the data points (days) which fall within the cumulative period requested.
    attr_accessor :cumulative_dates

    # A count of the data points (days) for which there was growth / performance recorded.  Not all fund options are active on all days (ie: stock market closures, weekends, etc).
    attr_accessor :performance_dates

    # A count of the data points (days) for which there was no growth / performance recorded.  Not all fund options are active on all days (ie: stock market closures, weekends, etc).
    attr_accessor :non_performance_dates

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'report' => :'report',
        :'growth_rate' => :'growth_rate',
        :'growth_rate_type' => :'growth_rate_type',
        :'start_date' => :'start_date',
        :'end_date' => :'end_date',
        :'cumulative_dates' => :'cumulative_dates',
        :'performance_dates' => :'performance_dates',
        :'non_performance_dates' => :'non_performance_dates'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'report' => :'String',
        :'growth_rate' => :'Float',
        :'growth_rate_type' => :'String',
        :'start_date' => :'Date',
        :'end_date' => :'Date',
        :'cumulative_dates' => :'Integer',
        :'performance_dates' => :'Integer',
        :'non_performance_dates' => :'Integer'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `SuperAPI::APIEntitiesCumulativePerformance` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `SuperAPI::APIEntitiesCumulativePerformance`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'report')
        self.report = attributes[:'report']
      end

      if attributes.key?(:'growth_rate')
        self.growth_rate = attributes[:'growth_rate']
      end

      if attributes.key?(:'growth_rate_type')
        self.growth_rate_type = attributes[:'growth_rate_type']
      end

      if attributes.key?(:'start_date')
        self.start_date = attributes[:'start_date']
      end

      if attributes.key?(:'end_date')
        self.end_date = attributes[:'end_date']
      end

      if attributes.key?(:'cumulative_dates')
        self.cumulative_dates = attributes[:'cumulative_dates']
      end

      if attributes.key?(:'performance_dates')
        self.performance_dates = attributes[:'performance_dates']
      end

      if attributes.key?(:'non_performance_dates')
        self.non_performance_dates = attributes[:'non_performance_dates']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      if @report.nil?
        invalid_properties.push('invalid value for "report", report cannot be nil.')
      end

      if @growth_rate.nil?
        invalid_properties.push('invalid value for "growth_rate", growth_rate cannot be nil.')
      end

      if @growth_rate_type.nil?
        invalid_properties.push('invalid value for "growth_rate_type", growth_rate_type cannot be nil.')
      end

      if @start_date.nil?
        invalid_properties.push('invalid value for "start_date", start_date cannot be nil.')
      end

      if @end_date.nil?
        invalid_properties.push('invalid value for "end_date", end_date cannot be nil.')
      end

      if @cumulative_dates.nil?
        invalid_properties.push('invalid value for "cumulative_dates", cumulative_dates cannot be nil.')
      end

      if @performance_dates.nil?
        invalid_properties.push('invalid value for "performance_dates", performance_dates cannot be nil.')
      end

      if @non_performance_dates.nil?
        invalid_properties.push('invalid value for "non_performance_dates", non_performance_dates cannot be nil.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if @report.nil?
      return false if @growth_rate.nil?
      return false if @growth_rate_type.nil?
      return false if @start_date.nil?
      return false if @end_date.nil?
      return false if @cumulative_dates.nil?
      return false if @performance_dates.nil?
      return false if @non_performance_dates.nil?
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          report == o.report &&
          growth_rate == o.growth_rate &&
          growth_rate_type == o.growth_rate_type &&
          start_date == o.start_date &&
          end_date == o.end_date &&
          cumulative_dates == o.cumulative_dates &&
          performance_dates == o.performance_dates &&
          non_performance_dates == o.non_performance_dates
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [report, growth_rate, growth_rate_type, start_date, end_date, cumulative_dates, performance_dates, non_performance_dates].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.openapi_types.each_pair do |key, type|
        if attributes[self.class.attribute_map[key]].nil? && self.class.openapi_nullable.include?(key)
          self.send("#{key}=", nil)
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = SuperAPI.const_get(type)
        klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
