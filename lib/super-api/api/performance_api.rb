=begin
#Super API Documentation

#The Super API makes superannuation fund data easily accessible for developers.  Build the future.

The version of the OpenAPI document: 1.0.0
Contact: support@superapi.com.au
Generated by: https://openapi-generator.tech
OpenAPI Generator version: 5.1.0-SNAPSHOT

=end

require 'cgi'

module SuperAPI
  class PerformanceApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Annual Performance
    # The annual performance for a FundOption for a given year.
    # @param name [String] 
    # @param year [Integer] Year of the performance data
    # @param [Hash] opts the optional parameters
    # @return [APIEntitiesAnnualPerformance]
    def get_v1_name_annual(name, year, opts = {})
      data, _status_code, _headers = get_v1_name_annual_with_http_info(name, year, opts)
      data
    end

    # Annual Performance
    # The annual performance for a FundOption for a given year.
    # @param name [String] 
    # @param year [Integer] Year of the performance data
    # @param [Hash] opts the optional parameters
    # @return [Array<(APIEntitiesAnnualPerformance, Integer, Hash)>] APIEntitiesAnnualPerformance data, response status code and response headers
    def get_v1_name_annual_with_http_info(name, year, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PerformanceApi.get_v1_name_annual ...'
      end
      # verify the required parameter 'name' is set
      if @api_client.config.client_side_validation && name.nil?
        fail ArgumentError, "Missing the required parameter 'name' when calling PerformanceApi.get_v1_name_annual"
      end
      # verify the required parameter 'year' is set
      if @api_client.config.client_side_validation && year.nil?
        fail ArgumentError, "Missing the required parameter 'year' when calling PerformanceApi.get_v1_name_annual"
      end
      # resource path
      local_var_path = '/v1/{name}/annual'.sub('{' + 'name' + '}', CGI.escape(name.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'year'] = year

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'APIEntitiesAnnualPerformance'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"PerformanceApi.get_v1_name_annual",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PerformanceApi#get_v1_name_annual\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Cumulative Performance
    # The cumulative performance from the inception of the FundOption.  This represents the growth over time from the inception date of the FundOption to the requested date.
    # @param name [String] 
    # @param start_date [Date] Start date of the desired cumulative period
    # @param end_date [Date] End date of the desired cumulative period
    # @param [Hash] opts the optional parameters
    # @return [APIEntitiesCumulativePerformance]
    def get_v1_name_cumulative(name, start_date, end_date, opts = {})
      data, _status_code, _headers = get_v1_name_cumulative_with_http_info(name, start_date, end_date, opts)
      data
    end

    # Cumulative Performance
    # The cumulative performance from the inception of the FundOption.  This represents the growth over time from the inception date of the FundOption to the requested date.
    # @param name [String] 
    # @param start_date [Date] Start date of the desired cumulative period
    # @param end_date [Date] End date of the desired cumulative period
    # @param [Hash] opts the optional parameters
    # @return [Array<(APIEntitiesCumulativePerformance, Integer, Hash)>] APIEntitiesCumulativePerformance data, response status code and response headers
    def get_v1_name_cumulative_with_http_info(name, start_date, end_date, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PerformanceApi.get_v1_name_cumulative ...'
      end
      # verify the required parameter 'name' is set
      if @api_client.config.client_side_validation && name.nil?
        fail ArgumentError, "Missing the required parameter 'name' when calling PerformanceApi.get_v1_name_cumulative"
      end
      # verify the required parameter 'start_date' is set
      if @api_client.config.client_side_validation && start_date.nil?
        fail ArgumentError, "Missing the required parameter 'start_date' when calling PerformanceApi.get_v1_name_cumulative"
      end
      # verify the required parameter 'end_date' is set
      if @api_client.config.client_side_validation && end_date.nil?
        fail ArgumentError, "Missing the required parameter 'end_date' when calling PerformanceApi.get_v1_name_cumulative"
      end
      # resource path
      local_var_path = '/v1/{name}/cumulative'.sub('{' + 'name' + '}', CGI.escape(name.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'startDate'] = start_date
      query_params[:'endDate'] = end_date

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'APIEntitiesCumulativePerformance'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"PerformanceApi.get_v1_name_cumulative",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PerformanceApi#get_v1_name_cumulative\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Daily Performance
    # The performance for a superannuation FundOption on a specific day.  Not all FundOptions will have a performance on every day, as some FundOptions are not relevant on every day (ie: public holidays, weekends, market closures, etc).  A result of 0 represents no performance.
    # @param name [String] 
    # @param date [Date] Date of the performance data
    # @param [Hash] opts the optional parameters
    # @return [APIEntitiesPerformance]
    def get_v1_name_daily(name, date, opts = {})
      data, _status_code, _headers = get_v1_name_daily_with_http_info(name, date, opts)
      data
    end

    # Daily Performance
    # The performance for a superannuation FundOption on a specific day.  Not all FundOptions will have a performance on every day, as some FundOptions are not relevant on every day (ie: public holidays, weekends, market closures, etc).  A result of 0 represents no performance.
    # @param name [String] 
    # @param date [Date] Date of the performance data
    # @param [Hash] opts the optional parameters
    # @return [Array<(APIEntitiesPerformance, Integer, Hash)>] APIEntitiesPerformance data, response status code and response headers
    def get_v1_name_daily_with_http_info(name, date, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PerformanceApi.get_v1_name_daily ...'
      end
      # verify the required parameter 'name' is set
      if @api_client.config.client_side_validation && name.nil?
        fail ArgumentError, "Missing the required parameter 'name' when calling PerformanceApi.get_v1_name_daily"
      end
      # verify the required parameter 'date' is set
      if @api_client.config.client_side_validation && date.nil?
        fail ArgumentError, "Missing the required parameter 'date' when calling PerformanceApi.get_v1_name_daily"
      end
      # resource path
      local_var_path = '/v1/{name}/daily'.sub('{' + 'name' + '}', CGI.escape(name.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'date'] = date

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'APIEntitiesPerformance'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"PerformanceApi.get_v1_name_daily",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PerformanceApi#get_v1_name_daily\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Latest Performance
    # Retrieves the performance for the most recent date, for which performance data exists.
    # @param name [String] 
    # @param [Hash] opts the optional parameters
    # @return [APIEntitiesPerformance]
    def get_v1_name_daily_latest(name, opts = {})
      data, _status_code, _headers = get_v1_name_daily_latest_with_http_info(name, opts)
      data
    end

    # Latest Performance
    # Retrieves the performance for the most recent date, for which performance data exists.
    # @param name [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(APIEntitiesPerformance, Integer, Hash)>] APIEntitiesPerformance data, response status code and response headers
    def get_v1_name_daily_latest_with_http_info(name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PerformanceApi.get_v1_name_daily_latest ...'
      end
      # verify the required parameter 'name' is set
      if @api_client.config.client_side_validation && name.nil?
        fail ArgumentError, "Missing the required parameter 'name' when calling PerformanceApi.get_v1_name_daily_latest"
      end
      # resource path
      local_var_path = '/v1/{name}/daily/latest'.sub('{' + 'name' + '}', CGI.escape(name.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'APIEntitiesPerformance'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"PerformanceApi.get_v1_name_daily_latest",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PerformanceApi#get_v1_name_daily_latest\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Today's Performance
    # Retrieves the performance for today.  This retrieves the same results as the Daily endpoint, but provides a shortcut to retrieve todays performance for a given FundOption.
    # @param name [String] 
    # @param [Hash] opts the optional parameters
    # @return [APIEntitiesPerformance]
    def get_v1_name_daily_today(name, opts = {})
      data, _status_code, _headers = get_v1_name_daily_today_with_http_info(name, opts)
      data
    end

    # Today&#39;s Performance
    # Retrieves the performance for today.  This retrieves the same results as the Daily endpoint, but provides a shortcut to retrieve todays performance for a given FundOption.
    # @param name [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(APIEntitiesPerformance, Integer, Hash)>] APIEntitiesPerformance data, response status code and response headers
    def get_v1_name_daily_today_with_http_info(name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PerformanceApi.get_v1_name_daily_today ...'
      end
      # verify the required parameter 'name' is set
      if @api_client.config.client_side_validation && name.nil?
        fail ArgumentError, "Missing the required parameter 'name' when calling PerformanceApi.get_v1_name_daily_today"
      end
      # resource path
      local_var_path = '/v1/{name}/daily/today'.sub('{' + 'name' + '}', CGI.escape(name.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'APIEntitiesPerformance'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"PerformanceApi.get_v1_name_daily_today",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PerformanceApi#get_v1_name_daily_today\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Yesterday's Performance
    # Retrieves the performance for yesterday.  This retrieves the same results as the Daily endpoint, but provides a shortcut to retrieve yesterday performance for a given FundOption.
    # @param name [String] 
    # @param [Hash] opts the optional parameters
    # @return [APIEntitiesPerformance]
    def get_v1_name_daily_yesterday(name, opts = {})
      data, _status_code, _headers = get_v1_name_daily_yesterday_with_http_info(name, opts)
      data
    end

    # Yesterday&#39;s Performance
    # Retrieves the performance for yesterday.  This retrieves the same results as the Daily endpoint, but provides a shortcut to retrieve yesterday performance for a given FundOption.
    # @param name [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(APIEntitiesPerformance, Integer, Hash)>] APIEntitiesPerformance data, response status code and response headers
    def get_v1_name_daily_yesterday_with_http_info(name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PerformanceApi.get_v1_name_daily_yesterday ...'
      end
      # verify the required parameter 'name' is set
      if @api_client.config.client_side_validation && name.nil?
        fail ArgumentError, "Missing the required parameter 'name' when calling PerformanceApi.get_v1_name_daily_yesterday"
      end
      # resource path
      local_var_path = '/v1/{name}/daily/yesterday'.sub('{' + 'name' + '}', CGI.escape(name.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'APIEntitiesPerformance'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"PerformanceApi.get_v1_name_daily_yesterday",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PerformanceApi#get_v1_name_daily_yesterday\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
